---
- name: configure aap operator
  hosts: localhost
  # vars:
  #   # Set a reasonable timeout for the wait
  #   wait_minutes: 5
  #   wait_delay_seconds: 15
  #   subscription_name: ansible-automation-platform-operator
  tasks:

    # - name: Install Ansible Automation Platform operator
    #   vars:
    #       install_channel: "stable-2.5"
    #       install_starting_csv: "aap-operator.v2.5.0-0.1755835086"
    #       install_plan_approval: "Manual"
    #       install_namespace: "aap2"
    #   ansible.builtin.import_role:
    #       name: operator

    - name: Update AAP CR
      kubernetes.core.k8s:
        state: patched
        definition:
          apiVersion: aap.ansible.com/v1alpha1
          kind: AnsibleAutomationPlatform
          metadata:
            name: aap
            namespace: "{{ install_namespace }}"
          spec:
            database:
              resource_requirements:
                limits:
                  cpu: 1000m
                  memory: 75Mi
                requests:
                  cpu: 500m
                  memory: 50Mi
            controller:
              auto_upgrade: false              
            # api:
            #   resource_requirements:
            #     limits:
            #       cpu: 500m
            #       memory: 2Gi
            #     requests:
            #       cpu: 250m
            #       memory: 1Gi        
            # redis:
            #   resource_requirements:
            #     limits:
            #       cpu: 500m
            #       memory: 2Gi
            #     requests:
            #       cpu: 250m
            #       memory: 1Gi         
              # ee_resource_requirements:
              #   limits:
              #     cpu: 1000m
              #     memory: 1Gi
              #   requests:
              #     cpu: 500m
              #     memory: 50Mi      
              # task_resource_requirements:
              #   limits:
              #     cpu: 1000m
              #     memory: 1Gi
              #   requests:
              #     cpu: 500m
              #     memory: 50Mi               
              # rsyslog_resource_requirements:
              #   limits:
              #     cpu: 1000m
              #     memory: 1Gi
              #   requests:
              #     cpu: 500m
              #     memory: 50Mi        
              # web_resource_requirements:
              #   limits:
              #     cpu: 1000m
              #     memory: 1Gi
              #   requests:
              #     cpu: 500m
              #     memory: 50Mi      
              # postgres_resource_requirements:
              #   limits:
              #     cpu: 1000m
              #     memory: 1Gi
              #   requests:
              #     cpu: 500m
              #     memory: 50Mi
              # redis_resource_requirements:
              #   limits:
              #     cpu: 1000m
              #     memory: 1Gi
              #   requests:
              #     cpu: 500m
              #     memory: 50Mi
              # init_container_resource_requirements:
              #   limits:
              #     cpu: 1000m
              #     memory: 1Gi
              #   requests:
              #     cpu: 500m
              #     memory: 50Mi

    - name: modify namespace
      kubernetes.core.k8s:
        state: present
        definition: 
          apiVersion: v1
          kind: ResourceQuota
          metadata:
            name: "{{ install_namespace }}-quota"
            namespace: "{{ install_namespace }}"
          spec:
            hard:
              requests.cpu: "4" 
              limits.cpu: "4"
              requests.memory: 2Gi
              limits.memory: 4Gi
              pods: "8"
              services: "2" 
              persistentvolumeclaims: "1"          

    # - name: create namespace
    #   kubernetes.core.k8s:
    #     name: "{{ install_namespace }}"
    #     kind: Namespace
    #     state: present

    # - name: create operatorgroup
    # - name: create namespace
    #   kubernetes.core.k8s:
    #     name: "{{ install_namespace }}"
    #     kind: Namespace
    #     state: present

    # - name: create operatorgroup
    #   kubernetes.core.k8s:
    #     state: present
    #     definition: 
    #       apiVersion: operators.coreos.com/v1
    #       kind: OperatorGroup
    #       metadata:
    #         name: "{{ subscription_name }}-operator-group"
    #         namespace: "{{ install_namespace }}"
    #       spec:
    #         targetNamespaces:
    #           - "{{ install_namespace }}"

    # - name: Install subscription
    #   kubernetes.core.k8s:
    #     state: present
    #     definition:
    #       apiVersion: operators.coreos.com/v1alpha1
    #       kind: Subscription
    #       metadata:
    #         generation: 1
    #         name: "{{ subscription_name }}"
    #         namespace: "{{ install_namespace }}"
    #       spec:
    #         channel: stable-2.5
    #         installPlanApproval: Manual
    #         name: ansible-automation-platform-operator
    #         source: redhat-operators
    #         sourceNamespace: openshift-marketplace
    #         startingCSV: aap-operator.v2.5.0-0.1728520175

    # - name: Get list of InstallPlans (Wait up to {{ wait_minutes }}m)
    #   kubernetes.core.k8s_info:
    #     api_version: operators.coreos.com/v1alpha1
    #     kind: InstallPlan
    #     namespace: "{{ install_namespace }}"
    #   register: install_plans_list
    #   until: install_plans_list.resources | length > 0
    #   # FIX: Use parentheses to calculate division first, then convert the result to an integer
    #   retries: "{{ ((wait_minutes * 60) / wait_delay_seconds) | int }}"
    #   delay: "{{ wait_delay_seconds }}"
    #   failed_when: install_plans_list.resources | length == 0

    # - name: Use OC to find the InstallPlan name for manual approval
    #   ansible.builtin.shell:
    #     # Use the shell module to enable pipes and shell built-ins
    #     cmd: "oc get installplan -n {{ install_namespace }} -o custom-columns=NAME:.metadata.name,PHASE:.status.phase --no-headers | grep 'RequiresApproval' | awk '{print $1}'"
    #   register: ip_cmd_output
    #   changed_when: false
    #   # Check for failure: non-zero exit code OR if the output is empty (meaning no pending plan was found)
    #   failed_when: ip_cmd_output.rc != 0 and 'No resources found' not in ip_cmd_output.stderr

    # - name: Set final clean variable from command output
    #   ansible.builtin.set_fact:
    #     # The output is now guaranteed to be clean by the shell tools
    #     install_plan_name_final: "{{ ip_cmd_output.stdout | default('') | trim }}"

    # - name: Verify extracted name and proceed to approve
    #   ansible.builtin.debug:
    #     msg: "FINAL CLEAN NAME: '{{ install_plan_name_final }}'. Proceeding to approve."
    #   when: install_plan_name_final is defined and install_plan_name_final | length > 0

    # - name: Approve the identified InstallPlan using kubernetes.core
    #   kubernetes.core.k8s:
    #     state: patched
    #     api_version: operators.coreos.com/v1alpha1
    #     kind: InstallPlan
    #     # Use the clean, shell-extracted variable for the name
    #     name: "{{ install_plan_name_final }}" 
    #     namespace: "{{ install_namespace }}"
    #     # patch_type: merge
    #     definition:
    #       spec:
    #         approved: true
    #   # Only run this task if the shell extraction was successful and found a name
    #   when: install_plan_name_final is defined and install_plan_name_final | length > 0      

    # - name: Wait for Subscription to reach Succeeded status (up to 10m)
    #   kubernetes.core.k8s_info:
    #     api_version: operators.coreos.com/v1alpha1
    #     kind: Subscription
    #     # Use the name of the Subscription resource (e.g., ansible-automation-platform)
    #     name: "{{ subscription_name }}" 
    #     namespace: "{{ install_namespace }}"
    #   register: subscription_status
    #   # Set a total timeout (10 minutes)
    #   retries: 40
    #   delay: 15
    #   # Condition: Loop until the status array contains a condition 
    #   # with type 'Installed' and status 'True'
    #   until: 
    #     subscription_status.resources | length > 0 and 
    #     subscription_status.resources[0].status.conditions | 
    #     json_query("[?type=='Installed' && status=='True']") | length > 0

    # - name: Subscription Status Check
    #   ansible.builtin.debug:
    #     msg: "Subscription {{ subscription_name }} is now successfully installed."
    #   kubernetes.core.k8s:
    #     state: present
    #     definition: 
    #       apiVersion: operators.coreos.com/v1
    #       kind: OperatorGroup
    #       metadata:
    #         name: "{{ subscription_name }}-operator-group"
    #         namespace: "{{ install_namespace }}"
    #       spec:
    #         targetNamespaces:
    #           - "{{ install_namespace }}"

    # - name: Install subscription
    #   kubernetes.core.k8s:
    #     state: present
    #     definition:
    #       apiVersion: operators.coreos.com/v1alpha1
    #       kind: Subscription
    #       metadata:
    #         generation: 1
    #         name: "{{ subscription_name }}"
    #         namespace: "{{ install_namespace }}"
    #       spec:
    #         channel: stable-2.5
    #         installPlanApproval: Manual
    #         name: ansible-automation-platform-operator
    #         source: redhat-operators
    #         sourceNamespace: openshift-marketplace
    #         startingCSV: aap-operator.v2.5.0-0.1728520175

    # - name: Get list of InstallPlans (Wait up to {{ wait_minutes }}m)
    #   kubernetes.core.k8s_info:
    #     api_version: operators.coreos.com/v1alpha1
    #     kind: InstallPlan
    #     namespace: "{{ install_namespace }}"
    #   register: install_plans_list
    #   until: install_plans_list.resources | length > 0
    #   # FIX: Use parentheses to calculate division first, then convert the result to an integer
    #   retries: "{{ ((wait_minutes * 60) / wait_delay_seconds) | int }}"
    #   delay: "{{ wait_delay_seconds }}"
    #   failed_when: install_plans_list.resources | length == 0

    # - name: Use OC to find the InstallPlan name for manual approval
    #   ansible.builtin.shell:
    #     # Use the shell module to enable pipes and shell built-ins
    #     cmd: "oc get installplan -n {{ install_namespace }} -o custom-columns=NAME:.metadata.name,PHASE:.status.phase --no-headers | grep 'RequiresApproval' | awk '{print $1}'"
    #   register: ip_cmd_output
    #   changed_when: false
    #   # Check for failure: non-zero exit code OR if the output is empty (meaning no pending plan was found)
    #   failed_when: ip_cmd_output.rc != 0 and 'No resources found' not in ip_cmd_output.stderr

    # - name: Set final clean variable from command output
    #   ansible.builtin.set_fact:
    #     # The output is now guaranteed to be clean by the shell tools
    #     install_plan_name_final: "{{ ip_cmd_output.stdout | default('') | trim }}"

    # - name: Verify extracted name and proceed to approve
    #   ansible.builtin.debug:
    #     msg: "FINAL CLEAN NAME: '{{ install_plan_name_final }}'. Proceeding to approve."
    #   when: install_plan_name_final is defined and install_plan_name_final | length > 0

    # - name: Approve the identified InstallPlan using kubernetes.core
    #   kubernetes.core.k8s:
    #     state: patched
    #     api_version: operators.coreos.com/v1alpha1
    #     kind: InstallPlan
    #     # Use the clean, shell-extracted variable for the name
    #     name: "{{ install_plan_name_final }}" 
    #     namespace: "{{ install_namespace }}"
    #     # patch_type: merge
    #     definition:
    #       spec:
    #         approved: true
    #   # Only run this task if the shell extraction was successful and found a name
    #   when: install_plan_name_final is defined and install_plan_name_final | length > 0      

    # - name: Wait for Subscription to reach Succeeded status (up to 10m)
    #   kubernetes.core.k8s_info:
    #     api_version: operators.coreos.com/v1alpha1
    #     kind: Subscription
    #     # Use the name of the Subscription resource (e.g., ansible-automation-platform)
    #     name: "{{ subscription_name }}" 
    #     namespace: "{{ install_namespace }}"
    #   register: subscription_status
    #   # Set a total timeout (10 minutes)
    #   retries: 40
    #   delay: 15
    #   # Condition: Loop until the status array contains a condition 
    #   # with type 'Installed' and status 'True'
    #   until: 
    #     subscription_status.resources | length > 0 and 
    #     subscription_status.resources[0].status.conditions | 
    #     json_query("[?type=='Installed' && status=='True']") | length > 0

    # - name: Subscription Status Check
    #   ansible.builtin.debug:
    #     msg: "Subscription {{ subscription_name }} is now successfully installed."